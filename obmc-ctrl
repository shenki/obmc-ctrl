#!/usr/bin/python2
#
# OpenBMC REST interface command line client
#
# Copyright 2016 IBM Corp, Joel Stanley <joel@jms.id.au>
# Licensed under the Apache License, Version 2.0
#

import sys
import requests
import time

# This avoids a warning on stdout when connecting to the self-signed
# certificate used on OpenBMC:
#  /usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:794:
#  InsecureRequestWarning: Unverified HTTPS request is being made. Adding
#  certificate verification is strongly advised. See:
#  https://urllib3.readthedocs.org/en/latest/security.html
#  InsecureRequestWarning)
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

PASSWORD = '0penBmc'

def usage():
    print "usage: %s [command]" % (sys.argv[0])
    print
    print "Commands:"
    print "\tchassis"
    print "\t  on         power on the host"
    print "\t  off        immediately power off the host"
    print "\t  reboot     immediately power cycle the host"
    print "\t  softoff    request a graceful power down of the host"
    print "\t  softreboot request a graceful power cycle of the host"
    print "\t  state      request current host power state (default action)"
    print
    print "\tversion"
    print "\t  display the software version information"
    print

if len(sys.argv) < 2:
    usage()
    sys.exit(1)

host = 'https://%s' % sys.argv[1]

r = requests.post(host + '/login',
        headers={'Content-Type': 'application/json'},
        data='{"data": [ "root", "0penBmc" ] }',
        verify = False)

if r.status_code != 200:
    print 'login failed:', r.status_code
    sys.exit(r.status_code)

cookies = r.cookies

if sys.argv[2] == 'chassis':
    if len(sys.argv) != 4:
        usage()
        sys.exit(1)

    action_map = {
            'on': 'powerOn',
            'off': 'powerOff',
            'softoff': 'softPowerOff',
            'softreboot': 'softReboot',
            'reboot': 'reboot',
            'idon': 'setIdentify',
            'idoff': 'clearIdentify',
            'state': 'getPowerstate',
    }

    if sys.argv[3] not in action_map:
        usage()
        sys.exit(1)

    action = action_map[sys.argv[3]]

    url = host + '/org/openbmc/control/chassis0/action/' + action

    r = requests.post(url,
            headers={'Content-Type': 'application/json'},
            data='{"data": []}',
            verify = False,
            cookies = cookies)

    print 'chassis:', r.status_code

    if action == 'state':
        print r.text

elif sys.argv[2] == 'version':
    url = host + '/org/openbmc/inventory/system'
    r = requests.get(url, verify = False, cookies = r.cookies)

    print r.text

elif sys.argv[2] == 'update':
    if len(sys.argv) != 5:
        usage()
        sys.exit(1)

    tftp_server = sys.argv[3]
    update_file = sys.argv[4]

    print 'Updating from %s with %s' % (tftp_server, update_file)
    raw_input('Press enter to continue...')

    url = host + '/org/openbmc/control/flash/bmc'

    r = requests.post(url + '/action/prepareForUpdate',
            headers= {'Content-Type': 'application/json'},
            data='{"data": []}', verify = False, cookies = cookies)
    if r.status_code != 200:
        print 'Error:', r.status_code
        sys.exit(1)

    r = requests.put(url + '/attr/preserve_network_settings',
            headers= {'Content-Type': 'application/json'},
            data='{"data": 1}', verify = False, cookies = cookies)
    if r.status_code != 200:
        print 'Error:', r.status_code
        sys.exit(1)

    r = requests.post(url + '/action/updateViaTftp',
            headers= {'Content-Type': 'application/json'},
            data='{"data": ["%s", "%s"]}' % (tftp_server, update_file),
            verify = False, cookies = cookies)
    if r.status_code != 200:
        print 'Error:', r.status_code
        sys.exit(1)

    while True:
        r = requests.post(url + '/action/GetUpdateProgress',
                headers= {'Content-Type': 'application/json'},
                data='{"data": []}', verify = False, cookies = cookies)
        print r.text
        time.sleep(5)


elif sys.argv[2] == 'updatehost':
    if len(sys.argv) != 5:
        usage()
        sys.exit(1)

    tftp_server = sys.argv[3]
    update_file = sys.argv[4]

    print 'Updating from %s with %s' % (tftp_server, update_file)
    raw_input('Press enter to continue...')

    url = host + '/org/openbmc/control/flash/bios'

    r = requests.post(url + '/action/updateViaTftp',
            headers= {'Content-Type': 'application/json'},
            data='{"data": ["%s", "%s"]}' % (tftp_server, update_file),
            verify = False, cookies = cookies)
    if r.status_code != 200:
        print 'Error:', r.status_code
        sys.exit(1)

    # {
    #   "data": {
    #     "filename": "palmetto.pnor", 
    #     "flasher_instance": "bios", 
    #     "flasher_name": "flasher.exe", 
    #     "flasher_path": "/usr/sbin/flasher.exe", 
    #     "lock": 0, 
    #     "name": "", 
    #     "status": "Downloading"
    #   }, 
    #   "message": "200 OK", 
    #   "status": "ok"
    # }
    #
    # "status": "Downloading"
    # "status": "Flashing: 15%"
    # "status": "Flash Error"


    while True:
        r = requests.get(url, verify = False, cookies = cookies)
        print r.text
        time.sleep(5)
