#!/usr/bin/python3
#
# OpenBMC REST interface command line client
#
# Copyright 2016 IBM Corp, Joel Stanley <joel@jms.id.au>
# Licensed under the Apache License, Version 2.0
#

import sys
import requests
import time
import json
import argparse

# This avoids a warning on stdout when connecting to the self-signed
# certificate used on OpenBMC:
#  /usr/lib/python2.7/dist-packages/urllib3/connectionpool.py:794:
#  InsecureRequestWarning: Unverified HTTPS request is being made. Adding
#  certificate verification is strongly advised. See:
#  https://urllib3.readthedocs.org/en/latest/security.html
#  InsecureRequestWarning)
requests.packages.urllib3.disable_warnings()

PASSWORD = '0penBmc'


def do_chassis_cmd(args):
    action_map = {
            'on': 'powerOn',
            'off': 'powerOff',
            'softoff': 'softPowerOff',
            'softreboot': 'softReboot',
            'reboot': 'reboot',
            'idon': 'setIdentify',
            'idoff': 'clearIdentify',
            'state': 'getPowerstate',
    }

    if args.chassis not in action_map:
        print('Invalid action for chassis command:', args.chassis)
        sys.exit(1)

    action = action_map[args.chassis]

    cookies = login(args.bmc)

    url = args.bmc + '/org/openbmc/control/chassis0/action/' + action

    r = requests.post(url,
                      headers={'Content-Type': 'application/json'},
                      data='{"data": []}',
                      verify=False,
                      cookies=cookies)

    print('chassis: {}'.format(r.status_code))

    if action == 'state':
        print(r.text)


def login(host):
    """login to the BMC and return a cookie object"""

    r = requests.post('https://' + host + '/login',
                      headers={'Content-Type': 'application/json'},
                      data='{"data": [ "root", "0penBmc" ] }',
                      verify=False)

    if r.status_code != 200:
        print('login failed: {}'.format(r.status_code))
        sys.exit(r.status_code)

    return r.cookies


def do_version_cmd(args):
    cookies = login(args.bmc)

    url = 'https://' + args.bmc + '/org/openbmc/inventory/system'
    r = requests.get(url, verify=False, cookies=cookies)

    print(r.text)


def do_update_cmd(args):
    print('Updating from {} with {}').format(args.tftp_server,
                                             args.update_file)
    input('Press enter to continue...')

    if args.flash == 'pnor':
        args.flash = 'bios'

    cookies = login(args.bmc)

    url = 'https://' + args.bmc + '/org/openbmc/control/flash/' + args.flash

    if args.flash == 'bmc':
        r = requests.post(url + '/action/prepareForUpdate',
                          headers={'Content-Type': 'application/json'},
                          data='{"data": []}', verify=False, cookies=cookies)
        if r.status_code != 200:
            print('Error: {}'.format(r.status_code))
            sys.exit(1)

        r = requests.put(url + '/attr/preserve_network_settings',
                         headers={'Content-Type': 'application/json'},
                         data='{"data": 1}', verify=False, cookies=cookies)
        if r.status_code != 200:
            print('Error: {}'.format(r.status_code))
            sys.exit(1)

    data = '{"data": ["%s", "%s"]}' % (args.tftp_server, args.update_file)

    r = requests.post(url + '/action/updateViaTftp',
                      headers={'Content-Type': 'application/json'},
                      data=data,
                      verify=False, cookies=cookies)
    if r.status_code != 200:
        print('Error: {}'.format(r.status_code))
        sys.exit(1)

    # {
    #   "data": {
    #     "filename": "palmetto.pnor",
    #     "flasher_instance": "bios",
    #     "flasher_name": "flasher.exe",
    #     "flasher_path": "/usr/sbin/flasher.exe",
    #     "lock": 0,
    #     "name": "",
    #     "status": "Downloading"
    #   },
    #   "message": "200 OK",
    #   "status": "ok"
    # }
    #
    # "status": "Downloading"
    # "status": "Flashing: 15%"
    # "status": "Flash Error"

    # The docs suggest this is require to get the progress for flashing the bmc
#    while True:
#        r = requests.post(url + '/action/GetUpdateProgress',
#                          headers={'Content-Type': 'application/json'},
#                          data='{"data": []}', verify=False, cookies=cookies)
#        print(r.text)
#        time.sleep(5)

    while True:
        r = requests.get(url, verify=False, cookies=cookies)
        try:
            status = json.loads(r.text)['data']['status']
        except:
            status = r.text
        print(status)
        if status.contains("Flash Error"):
            sys.exit(1)
        time.sleep(5)


def usage():
    usage_string = """usage: {} [command]

Commands:

chassis
    on         power on the host
    off        immediately power off the host
    reboot     immediately power cycle the host
    softoff    request a graceful power down of the host
    softreboot request a graceful power cycle of the host
    state      request current host power state (default action)

version
    display the software version information

"""
    print(usage_string.format(sys.argv[0]))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Control an OpenBMC system')
    parser.add_argument('--bmc', required=True,
                        help='hostname or IP address of the BMC')
    subparsers = parser.add_subparsers()

    cmd = subparsers.add_parser('chassis')
    cmd.add_argument('chassis', choices=['on', 'off', 'reboot', 'softoff',
                     'softreboot', 'state'])
    cmd.set_defaults(func=do_chassis_cmd)

    cmd = subparsers.add_parser('version')
    cmd.set_defaults(func=do_version_cmd)

    cmd = subparsers.add_parser('update')
    cmd.add_argument('flash', choices=['bmc', 'pnor'])
    cmd.add_argument('tftp_server')
    cmd.add_argument('update_file')
    cmd.set_defaults(func=do_update_cmd)

    args = parser.parse_args()
    args.func(args)
